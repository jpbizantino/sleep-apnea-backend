// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  userId    String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  name      String
  role      Role     @relation(fields: [roleId], references: [roleId])
  roleId    String   @db.ObjectId
  password  String
  active    Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role {
  roleId String  @id @default(auto()) @map("_id") @db.ObjectId
  name   String  @unique
  active Boolean

  User User[]
}

model Patient {
  patientId   String   @id @default(auto()) @map("_id") @db.ObjectId
  firstName   String
  lastName    String
  email       String
  dateOfBirth DateTime
  gender      String
  weight      Int
  height      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  Survey Survey[]
}

model Parameter {
  parameterId String @id @default(auto()) @map("_id") @db.ObjectId
  name        String @unique
  value       String
  description String
}

type Rule {
  processingRule String?
  scoreAction    String?
  valueA         Int?
  valueB         Int?
  scoreToAdd     Int?    @default(1)
}

type Choice {
  choiceId    String
  description String
  choiceValue Int
  order       Int
}

model Question {
  questionId         String            @id @default(auto()) @map("_id") @db.ObjectId
  question           String
  description        String
  order              Int
  questionType       String
  imageLink          String
  choices            Choice[]
  rule               Rule
  active             Boolean
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  calculatedField    CalculatedField[] @relation(fields: [calculatedFiledIds], references: [calculatedFieldId])
  calculatedFiledIds String[]          @db.ObjectId
  groupedField       GroupedField[]    @relation(fields: [groupedFiledIds], references: [groupedFieldId])
  groupedFiledIds    String[]          @db.ObjectId
}

type Answer {
  questionId    String
  jsonQuestion  String
  selectedValue Int
  selectedText  String
}

type SurveyResultSumary {
  columnName  String
  columnValue String
}

model Survey {
  surveyId           String               @id @default(auto()) @map("_id") @db.ObjectId
  patient            Patient              @relation(fields: [patientId], references: [patientId])
  answers            Answer[]
  calculatedScore    Int?                 @default(0)
  surveyResultSumary SurveyResultSumary[]
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  patientId          String               @db.ObjectId
}

model CalculatedField {
  calculatedFieldId String         @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  questions         Question[]     @relation(fields: [questionIds], references: [questionId])
  questionIds       String[]       @db.ObjectId
  groupedFields     GroupedField[] @relation(fields: [groupedFieldIds], references: [groupedFieldId])
  groupedFieldIds   String[]       @db.ObjectId
  operator          String
  scoreToAdd        Int
}

model GroupedField {
  groupedFieldId     String            @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  questions          Question[]        @relation(fields: [questionIds], references: [questionId])
  questionIds        String[]          @db.ObjectId
  rule               Rule
  calculatedField    CalculatedField[] @relation(fields: [calculatedFiledIds], references: [calculatedFieldId])
  calculatedFiledIds String[]          @db.ObjectId
}
